// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package squid

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GCPBucket struct {
	pulumi.ResourceState

	// The [GCS location](https://cloud.google.com/storage/docs/bucket-locations)
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// The name of the bucket
	Name pulumi.StringPtrOutput `pulumi:"name"`
}

// NewGCPBucket registers a new resource with the given unique name, arguments, and options.
func NewGCPBucket(ctx *pulumi.Context,
	name string, args *GCPBucketArgs, opts ...pulumi.ResourceOption) (*GCPBucket, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	var resource GCPBucket
	err := ctx.RegisterRemoteComponentResource("squid:index:GCPBucket", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type gcpbucketArgs struct {
	// The [GCS location](https://cloud.google.com/storage/docs/bucket-locations)
	Location string `pulumi:"location"`
	// The name of the bucket
	Name string `pulumi:"name"`
}

// The set of arguments for constructing a GCPBucket resource.
type GCPBucketArgs struct {
	// The [GCS location](https://cloud.google.com/storage/docs/bucket-locations)
	Location pulumi.StringInput
	// The name of the bucket
	Name pulumi.StringInput
}

func (GCPBucketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gcpbucketArgs)(nil)).Elem()
}

type GCPBucketInput interface {
	pulumi.Input

	ToGCPBucketOutput() GCPBucketOutput
	ToGCPBucketOutputWithContext(ctx context.Context) GCPBucketOutput
}

func (*GCPBucket) ElementType() reflect.Type {
	return reflect.TypeOf((**GCPBucket)(nil)).Elem()
}

func (i *GCPBucket) ToGCPBucketOutput() GCPBucketOutput {
	return i.ToGCPBucketOutputWithContext(context.Background())
}

func (i *GCPBucket) ToGCPBucketOutputWithContext(ctx context.Context) GCPBucketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCPBucketOutput)
}

// GCPBucketArrayInput is an input type that accepts GCPBucketArray and GCPBucketArrayOutput values.
// You can construct a concrete instance of `GCPBucketArrayInput` via:
//
//          GCPBucketArray{ GCPBucketArgs{...} }
type GCPBucketArrayInput interface {
	pulumi.Input

	ToGCPBucketArrayOutput() GCPBucketArrayOutput
	ToGCPBucketArrayOutputWithContext(context.Context) GCPBucketArrayOutput
}

type GCPBucketArray []GCPBucketInput

func (GCPBucketArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GCPBucket)(nil)).Elem()
}

func (i GCPBucketArray) ToGCPBucketArrayOutput() GCPBucketArrayOutput {
	return i.ToGCPBucketArrayOutputWithContext(context.Background())
}

func (i GCPBucketArray) ToGCPBucketArrayOutputWithContext(ctx context.Context) GCPBucketArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCPBucketArrayOutput)
}

// GCPBucketMapInput is an input type that accepts GCPBucketMap and GCPBucketMapOutput values.
// You can construct a concrete instance of `GCPBucketMapInput` via:
//
//          GCPBucketMap{ "key": GCPBucketArgs{...} }
type GCPBucketMapInput interface {
	pulumi.Input

	ToGCPBucketMapOutput() GCPBucketMapOutput
	ToGCPBucketMapOutputWithContext(context.Context) GCPBucketMapOutput
}

type GCPBucketMap map[string]GCPBucketInput

func (GCPBucketMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GCPBucket)(nil)).Elem()
}

func (i GCPBucketMap) ToGCPBucketMapOutput() GCPBucketMapOutput {
	return i.ToGCPBucketMapOutputWithContext(context.Background())
}

func (i GCPBucketMap) ToGCPBucketMapOutputWithContext(ctx context.Context) GCPBucketMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCPBucketMapOutput)
}

type GCPBucketOutput struct{ *pulumi.OutputState }

func (GCPBucketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GCPBucket)(nil)).Elem()
}

func (o GCPBucketOutput) ToGCPBucketOutput() GCPBucketOutput {
	return o
}

func (o GCPBucketOutput) ToGCPBucketOutputWithContext(ctx context.Context) GCPBucketOutput {
	return o
}

type GCPBucketArrayOutput struct{ *pulumi.OutputState }

func (GCPBucketArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GCPBucket)(nil)).Elem()
}

func (o GCPBucketArrayOutput) ToGCPBucketArrayOutput() GCPBucketArrayOutput {
	return o
}

func (o GCPBucketArrayOutput) ToGCPBucketArrayOutputWithContext(ctx context.Context) GCPBucketArrayOutput {
	return o
}

func (o GCPBucketArrayOutput) Index(i pulumi.IntInput) GCPBucketOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GCPBucket {
		return vs[0].([]*GCPBucket)[vs[1].(int)]
	}).(GCPBucketOutput)
}

type GCPBucketMapOutput struct{ *pulumi.OutputState }

func (GCPBucketMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GCPBucket)(nil)).Elem()
}

func (o GCPBucketMapOutput) ToGCPBucketMapOutput() GCPBucketMapOutput {
	return o
}

func (o GCPBucketMapOutput) ToGCPBucketMapOutputWithContext(ctx context.Context) GCPBucketMapOutput {
	return o
}

func (o GCPBucketMapOutput) MapIndex(k pulumi.StringInput) GCPBucketOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GCPBucket {
		return vs[0].(map[string]*GCPBucket)[vs[1].(string)]
	}).(GCPBucketOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GCPBucketInput)(nil)).Elem(), &GCPBucket{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCPBucketArrayInput)(nil)).Elem(), GCPBucketArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCPBucketMapInput)(nil)).Elem(), GCPBucketMap{})
	pulumi.RegisterOutputType(GCPBucketOutput{})
	pulumi.RegisterOutputType(GCPBucketArrayOutput{})
	pulumi.RegisterOutputType(GCPBucketMapOutput{})
}
